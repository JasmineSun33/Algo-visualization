{"version":3,"sources":["SortingVisualizer/algo.js","SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["swap","array","leftIndex","rightIndex","temp","SortingVisualizer","props","state","referenceArray","sortingMethod","isFinished","isPause","this","generateNewArray","min","max","newArray","i","size","randomNum","Math","floor","random","push","setState","slice","solutionAnimation","animationArray","len","length","j","getBubbleSortAnimations","arrayBars","document","getElementsByClassName","forEach","animation","index","setTimeout","oldIndex","newHeight","style","height","color","console","log","Button","variant","onClick","startSortingHandler","className","map","value","key","shortid","generate","width","Component","App","arraySize","changeInputSizeHandler","bind","event","newSize","target","Form","Row","Col","Group","controlId","Label","Control","as","custom","onChange","changeMethodHandler","type","Container","method","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.589da56b.chunk.js","sourcesContent":["export function getMergeSortAnimations(arr){\n    var animationArray = []; \n    var copiedArr = arr.slice();\n    return mergeSort(arr, copiedArr,animationArray,0, arr.length);\n}\n\nfunction mergeSort(arr,copiedArr, animationArray, startIndex, endIndex){\n    if (endIndex - startIndex <= 1) {\n        return arr;\n    }\n\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    // sort left-half\n    mergeSort(arr,copiedArr,animationArray,startIndex,middleIndex);\n    // sort right-half\n    mergeSort(arr,copiedArr,animationArray,middleIndex,endIndex);\n    merge_helper(arr, copiedArr,animationArray,startIndex,middleIndex,endIndex);\n\n    return animationArray;\n}\n\nfunction merge_helper(arr,copiedArr,animationArray,startIndex,middleIndex,endIndex){\n    let mergedArray = [];\n    var i = startIndex ,j = middleIndex ;\n    var newIndex = startIndex;\n\n    // animationArray.push([startIndex, endIndex]);  // 第一次，signal在操作哪一个部分 一头一尾  \n    while ( i < middleIndex && j < endIndex) {\n\n        if (arr[i] < arr[j]) {\n            // animationArray.push([i,newIndex]);      //第二次， change bar length\n            mergedArray.push(arr[i]); \n\n            i++;\n        } else {\n            // animationArray.push([j,newIndex]);\n            mergedArray.push(arr[j]); \n      \n            j++\n        }\n\n        newIndex++;\n    }\n    // make arr[start, end] sorted entirely by adding remainders \n    var finalizedArray;\n    if( i === middleIndex){\n        finalizedArray = mergedArray.concat(arr.slice(j, endIndex));\n        // animationArray.push([j,newIndex]);\n\n    }else{\n        finalizedArray = mergedArray.concat(arr.slice(i, middleIndex));\n        // animationArray.push([i,newIndex]);\n      \n    }\n\n\n    for(i=startIndex; i< endIndex; i++){\n        animationArray.push([i,finalizedArray[i-startIndex]]);      //oldIndex, newValue\n        \n\n    }\n    // animationArray.push(animationObj);\n\n    // update mergeArray into the original array\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    // splice(start, deleteCount, updateElement1....)\n    // ... is ES6 syntax, expand the array into individual elements\n    arr.splice(startIndex, finalizedArray.length, ...finalizedArray);\n\n\n\n}\n\n\nexport function getInsertionSortAnimations(array){\n\n    var n = array.length;\n\n    var animationArray = []; \n        // Invariant: array[:i] is sorted\n        for(var i=1; i< n; i++){\n            var currValue = array[i];\n    \n            var insertIndex = i-1;\n            while( insertIndex >= 0 && array[insertIndex] >= currValue){\n                array[insertIndex+1] = array[insertIndex];\n                animationArray.push([insertIndex+1, array[insertIndex]]);        // oldIndex, newValue\n                insertIndex --;\n            }\n            //insert at the correct index\n            array[insertIndex+1] = currValue;\n            animationArray.push([insertIndex+1, currValue]);\n            // console.log(array.slice(0,i))\n        }\n        return animationArray;\n}\n\nexport function getQuickSortAnimations(array){\n    var animationArray = []; \n\n    return quickSort(array, 0, array.length -1, animationArray)\n\n\n}\nfunction quickSort(array, left,right, animationArray){\n\n    if(array.length > 1){\n        var middleIndex = partition(array, left, right,animationArray);\n        if (middleIndex - left > 1){\n            quickSort(array, left, middleIndex - 1, animationArray);\n        }\n        if(right - middleIndex > 1){\n            quickSort(array, middleIndex, right, animationArray);\n        }\n    }\n    return animationArray;\n}\n\nfunction partition(array, left, right,animationArray) {\n    var pivot   = array[Math.floor((right + left) / 2)], //middle element\n        i       = left, //left pointer\n        j       = right; //right pointer\n    while (i <= j) {\n        while (array[i] < pivot) {\n            i++;\n        }\n        while (array[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {      // 如果两个人都卡住了\n            // console.log([ i, array[j] ])\n    \n            animationArray.push([i, array[j]]);   //old Index, new value\n            animationArray.push([j, array[i]]);   //old Index, new value\n            swap(array, i, j); //sawpping two elements\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n\nexport function getBubbleSortAnimations(array){\n    var animationArray = []; \n    let len = array.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (array[j] > array[j + 1]) {\n                // swap j and j+1 \n                animationArray.push([j, array[j+1]]);   \n                animationArray.push([j+1, array[j]]);   \n                swap(array,j,j+1);\n\n            }\n        }\n    }\n    return animationArray;\n};\n\n\nfunction swap(array, leftIndex, rightIndex){\n    var temp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = temp;\n}\n\n","import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations, getInsertionSortAnimations, getQuickSortAnimations, getBubbleSortAnimations} from './algo';\nimport Button from 'react-bootstrap/Button';\n// import DropdownButton from 'react-bootstrap/DropdownButton';\n// import Dropdown from 'react-bootstrap/Dropdown';\nimport shortid from \"shortid\";\n\nconst ARRAY_SIZE = 50;\nconst SPEED = 5;\nconst HEIGHT_FACTOR = 2.5;\nconst WIDTH_FACTOR = 1000;\n\n\n\nexport default class SortingVisualizer extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tarray:[],\n\t\t\treferenceArray:[],\n\t\t\tsortingMethod: 'MergeSort',     // Merge, Bubble, Quick, Insertion\n\t\t\tisFinished: false,\n\t\t\tisPause: false,\n\t\t};\n\n\t}\n\t\n\tcomponentDidMount(){\n\t\tthis.generateNewArray();\n\t\t\n\t}\n    \n\tgenerateNewArray(){\n\n\t\tvar newArray = [];\n\t\tfor(var i=0; i< this.props.size; i++){\n\t\t\tvar randomNum = randomIntFromInterval(10,1000);\n\t\t\tnewArray.push(randomNum);\n\t\t};\n\t\tthis.setState({array: newArray});\n\t\tthis.setState({referenceArray: newArray.slice()});\n\n\t}\n\n\tstartSortingHandler(){\n\n\t\t// var solutionAnimation = getMergeSortAnimations(this.state.array.slice());\n\t\t// var solutionAnimation = getQuickSortAnimations(this.state.array.slice());\n\t\t// var solutionAnimation = getInsertionSortAnimations(this.state.array.slice());\n\t\tvar solutionAnimation = getBubbleSortAnimations(this.state.array.slice());\n\n\t\tconst arrayBars = document.getElementsByClassName('Array-bar');\n\t\t// console.log(arrayBars);\n\t\tsolutionAnimation.forEach((animation, index) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\t\n\t\t\t\t\tconst oldIndex = animation[0];\n\t\t\t\t\tconst newHeight = animation[1] / HEIGHT_FACTOR;\n\t\t\t\t\tarrayBars[oldIndex].style.height = `${newHeight}px`;\n\t\t\t\t\tarrayBars[oldIndex].style.color = \"green\";\n\t\t\t\t\n\t\t\t}, SPEED * (index + 1));\n\t\t});\n\t}\n\n\n\n\n  render(){\n\t\tconsole.log(\"child component size:\", this.props.size)\n\t\tconst {array} = this.state;\n\n\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"outline-info\"\n\t\t\t\t\tonClick={() => this.generateNewArray()}>Generate new list \n\t\t\t\t</Button>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"outline-info\"\n\t\t\t\t\tonClick={() => this.startSortingHandler()}>GO! \n\t\t\t\t</Button>\n\t\t\t\t<div className='Display-window'>\n\t\t\t\t\t{array.map((value)=>(\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclassName='Array-bar' \n\t\t\t\t\t\t\tkey={shortid.generate()}\n\t\t\t\t\t\t\tstyle={{height:`${value / HEIGHT_FACTOR}px`, width: `${WIDTH_FACTOR / this.props.size}px`}}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t\t);\n\n  }\n\n}\n\n\nfunction randomIntFromInterval(min, max){ // min and max included \n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button';\n\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col'\n\nconst DEFAULT_SIZE = 100;\nconst SPEED = 5;\nconst HEIGHT_FACTOR = 2.5;\nconst WIDTH_FACTOR = 1000;\n\n\nconst MERGE_SORT = \"MERGE_SORT\";\nconst INSERTION_SORT = \"INSERTION_SORT\";\nconst QUICK_SORT = \"QUICK_SORT\";\nconst BUBBLE_SORT = \"BUBBLE_SORT\";\n\nconst SMALL_INPUT = 30;\nconst MEDIUM_INPUT = 80;\nconst LARGE_INPUT = 200;\n\n\nclass App extends React.Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n      arraySize: MEDIUM_INPUT,\n\t\t\tsortingMethod: MERGE_SORT,     // Merge, Bubble, Quick, Insertion\n\t\t\tisFinished: false,\n\t\t\tisPause: false,\n    };\n    this.changeInputSizeHandler = this.changeInputSizeHandler.bind(this);\n\n  }\n  \n  changeInputSizeHandler(event){\n    const newSize = event.target.value;\n    this.setState({arraySize: newSize});\n    console.log(this.state)\n  }\n  changeMethodHandler(){\n    \n  }\n \n\n\n\n  render(){\n  \n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form>\n            <Form.Row>\n              <Col>\n              <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\n                <Form.Label>Choose an algorithm</Form.Label>\n                <Form.Control as=\"select\" size=\"sm\" custom onChange={this.changeMethodHandler.bind(this)} >\n                  <option value={MERGE_SORT}>Merge Sort</option>\n                  <option value={QUICK_SORT}>Quick Sort</option>\n                  <option value={INSERTION_SORT}>Insertion Sort</option>\n                  <option value={BUBBLE_SORT}>Bubble Sort</option>\n                  <option>5</option>\n                </Form.Control>\n              </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\n                  <Form.Label>Input Size</Form.Label>\n                  <Form.Control as=\"select\" size=\"sm\" custom onChange={ this.changeInputSizeHandler}>\n                    <option value={SMALL_INPUT}>Small</option>\n                    <option value={MEDIUM_INPUT}>Medium</option>\n                    <option value={LARGE_INPUT}>Large</option>\n                    <option>4</option>\n                    <option>5</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"formBasicRangeCustom\">\n                    <Form.Label>Animation Speed</Form.Label>\n                    <Form.Control type=\"range\" custom />\n                </Form.Group>\n              </Col>\n            </Form.Row>\n          </Form>\n          \n\n          {/* <div>xxx comparson has done. xx% completed</div> */}\n\n        </header>\n\n        <Container>\n          <SortingVisualizer \n            size={this.state.arraySize}\n            method={\"MERGE_SORT\"}/>\n          <div className=\"article\">article about xxxx sorting algorithm</div>\n        </Container>\n\n\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}