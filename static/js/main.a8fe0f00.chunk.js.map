{"version":3,"sources":["SortingVisualizer/algo.js","SortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","arr","copiedArr","slice","mergeSort","animationArray","startIndex","endIndex","middleIndex","Math","floor","finalizedArray","mergedArray","i","j","push","concat","splice","length","merge_helper","getQuickSortAnimations","array","quickSort","left","right","pivot","swap","partition","leftIndex","rightIndex","temp","SortingVisualizer","props","state","referenceArray","isFinished","isPause","this","generateNewArray","prevProps","size","min","max","newArray","randomNum","random","setState","document","getElementById","textContent","solutionAnimation","sortingMethod","n","currValue","insertIndex","getInsertionSortAnimations","len","getBubbleSortAnimations","arrayBars","getElementsByClassName","comparsionCount","forEach","animation","index","setTimeout","oldIndex","newHeight","style","height","color","console","log","Button","variant","onClick","startSortingHandler","className","map","value","key","shortid","generate","width","id","Component","App","arraySize","changeInputSizeHandler","bind","event","newSize","target","newMethod","Form","Row","Col","Group","controlId","Label","Control","as","custom","onChange","changeMethodHandler","selected","type","Container","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8fe0f00.chunk.js","sourcesContent":["export function getMergeSortAnimations(arr){\n    var animationArray = []; \n    var copiedArr = arr.slice();\n    return mergeSort(arr, copiedArr,animationArray,0, arr.length);\n}\n\nfunction mergeSort(arr,copiedArr, animationArray, startIndex, endIndex){\n    if (endIndex - startIndex <= 1) {\n        return arr;\n    }\n\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    // sort left-half\n    mergeSort(arr,copiedArr,animationArray,startIndex,middleIndex);\n    // sort right-half\n    mergeSort(arr,copiedArr,animationArray,middleIndex,endIndex);\n    merge_helper(arr, copiedArr,animationArray,startIndex,middleIndex,endIndex);\n\n    return animationArray;\n}\n\nfunction merge_helper(arr,copiedArr,animationArray,startIndex,middleIndex,endIndex){\n    let mergedArray = [];\n    var i = startIndex ,j = middleIndex ;\n    var newIndex = startIndex;\n\n    // animationArray.push([startIndex, endIndex]);  // 第一次，signal在操作哪一个部分 一头一尾  \n    while ( i < middleIndex && j < endIndex) {\n\n        if (arr[i] < arr[j]) {\n            // animationArray.push([i,newIndex]);      //第二次， change bar length\n            mergedArray.push(arr[i]); \n\n            i++;\n        } else {\n            // animationArray.push([j,newIndex]);\n            mergedArray.push(arr[j]); \n      \n            j++\n        }\n\n        newIndex++;\n    }\n    // make arr[start, end] sorted entirely by adding remainders \n    var finalizedArray;\n    if( i === middleIndex){\n        finalizedArray = mergedArray.concat(arr.slice(j, endIndex));\n        // animationArray.push([j,newIndex]);\n\n    }else{\n        finalizedArray = mergedArray.concat(arr.slice(i, middleIndex));\n        // animationArray.push([i,newIndex]);\n      \n    }\n\n\n    for(i=startIndex; i< endIndex; i++){\n        animationArray.push([i,finalizedArray[i-startIndex]]);      //oldIndex, newValue\n        \n\n    }\n    // animationArray.push(animationObj);\n\n    // update mergeArray into the original array\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n    // splice(start, deleteCount, updateElement1....)\n    // ... is ES6 syntax, expand the array into individual elements\n    arr.splice(startIndex, finalizedArray.length, ...finalizedArray);\n\n\n\n}\n\n\nexport function getInsertionSortAnimations(array){\n\n    var n = array.length;\n\n    var animationArray = []; \n        // Invariant: array[:i] is sorted\n        for(var i=1; i< n; i++){\n            var currValue = array[i];\n    \n            var insertIndex = i-1;\n            while( insertIndex >= 0 && array[insertIndex] >= currValue){\n                array[insertIndex+1] = array[insertIndex];\n                animationArray.push([insertIndex+1, array[insertIndex]]);        // oldIndex, newValue\n                insertIndex --;\n            }\n            //insert at the correct index\n            array[insertIndex+1] = currValue;\n            animationArray.push([insertIndex+1, currValue]);\n            // console.log(array.slice(0,i))\n        }\n        return animationArray;\n}\n\nexport function getQuickSortAnimations(array){\n    var animationArray = []; \n\n    return quickSort(array, 0, array.length -1, animationArray)\n\n\n}\nfunction quickSort(array, left,right, animationArray){\n\n    if(array.length > 1){\n        var middleIndex = partition(array, left, right,animationArray);\n        if (middleIndex - left > 1){\n            quickSort(array, left, middleIndex - 1, animationArray);\n        }\n        if(right - middleIndex > 1){\n            quickSort(array, middleIndex, right, animationArray);\n        }\n    }\n    return animationArray;\n}\n\nfunction partition(array, left, right,animationArray) {\n    var pivot   = array[Math.floor((right + left) / 2)], //middle element\n        i       = left, //left pointer\n        j       = right; //right pointer\n    while (i <= j) {\n        while (array[i] < pivot) {\n            i++;\n        }\n        while (array[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {      // 如果两个人都卡住了\n            // console.log([ i, array[j] ])\n    \n            animationArray.push([i, array[j]]);   //old Index, new value\n            animationArray.push([j, array[i]]);   //old Index, new value\n            swap(array, i, j); //sawpping two elements\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n\nexport function getBubbleSortAnimations(array){\n    var animationArray = []; \n    let len = array.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (array[j] > array[j + 1]) {\n                // swap j and j+1 \n                animationArray.push([j, array[j+1]]);   \n                animationArray.push([j+1, array[j]]);   \n                swap(array,j,j+1);\n\n            }\n        }\n    }\n    return animationArray;\n};\n\n\nfunction swap(array, leftIndex, rightIndex){\n    var temp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = temp;\n}\n\n","import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations, getInsertionSortAnimations, getQuickSortAnimations, getBubbleSortAnimations} from './algo';\nimport Button from 'react-bootstrap/Button';\nimport shortid from \"shortid\";\n\nconst SPEED = 5;\nconst HEIGHT_FACTOR = 2.5;\nconst WIDTH_FACTOR = 1000;\nconst TIMEOUT = 300\n\nconst MERGE_SORT = \"MERGE_SORT\";\nconst INSERTION_SORT = \"INSERTION_SORT\";\nconst QUICK_SORT = \"QUICK_SORT\";\nconst BUBBLE_SORT = \"BUBBLE_SORT\";\n\nexport default class SortingVisualizer extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tarray:[],\n\t\t\treferenceArray:[],\n\t\t\tisFinished: true,\n\t\t\tisPause: false,\n\t\t};\n\n\t}\n\t\n\tcomponentDidMount(){\n\t\tthis.generateNewArray();\n\t\t\n\t}\n\t\n\tcomponentDidUpdate(prevProps){\n\t\t// 这一个class， <SortingVisualizer> component 整体的props有没有发生变化？\n\n\t\tif(prevProps.size != this.props.size){\n\t\t\tthis.generateNewArray();\n\n\t\t}\n\n\t}\n    \n\tgenerateNewArray(){\n\n\t\tvar newArray = [];\n\t\tfor(var i=0; i< this.props.size; i++){\n\t\t\tvar randomNum = randomIntFromInterval(10,1000);\n\t\t\tnewArray.push(randomNum);\n\t\t};\n\t\tthis.setState({array: newArray});\n\t\tthis.setState({referenceArray: newArray.slice()});\n\t\tdocument.getElementById('comparsion-count').textContent = 0\n\n\t\t// set the comparsion count to zero\n\n\t}\n\n\tfinishSortingHandler(){\n\t\tthis.setState({isFinished: true});\n\t\t// make buttons active\n\t}\n\n\tstartSortingHandler(){\n\n\t\tvar solutionAnimation;\n\t\t\n\t\tswitch(this.props.sortingMethod){\n\t\t\tcase \"MERGE_SORT\":\n\t\t\t\tsolutionAnimation = getMergeSortAnimations(this.state.array.slice());\n\t\t\t\tbreak;\n\t\t\tcase \"INSERTION_SORT\":\n\t\t\t\tsolutionAnimation = getInsertionSortAnimations(this.state.array.slice());\n\t\t\t\tbreak;\n\t\t\tcase \"QUICK_SORT\":\n\t\t\t\tsolutionAnimation = getQuickSortAnimations(this.state.array.slice());\n\t\t\t\tbreak;\n\t\t\tcase \"BUBBLE_SORT\":\n\t\t\t\tsolutionAnimation = getBubbleSortAnimations(this.state.array.slice());\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst arrayBars = document.getElementsByClassName('Array-bar');\n\t\tconst comparsionCount = document.getElementById('comparsion-count');\n\t\tsolutionAnimation.forEach((animation, index) => {\n\t\t\tsetTimeout(() => {\n\n\t\t\t\t\t// console.log( index,\"comparsion has been done\")\n\t\t\t\t\tcomparsionCount.textContent = index;\n\t\t\t\t\n\t\t\t\t\tconst oldIndex = animation[0];\n\t\t\t\t\tconst newHeight = animation[1] / HEIGHT_FACTOR;\n\t\t\t\t\tarrayBars[oldIndex].style.height = `${newHeight}px`;\n\t\t\t\t\tarrayBars[oldIndex].style.color = \"green\";\n\t\t\t\t\n\t\t\t}, SPEED * (index + 1)+ TIMEOUT);\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(\"FINISHED!\")\n\n\t\t}, SPEED * solutionAnimation.length + 500)\n\t}\n\n\n\n\n  render(){\n\t\tconst {array} = this.state;\n\n\t\tconsole.log()\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"outline-info\"\n\t\t\t\t\tonClick={() => this.generateNewArray()}>Generate new list \n\t\t\t\t</Button>\n\t\t\t\t<Button \n\t\t\t\t\tvariant=\"outline-info\"\n\t\t\t\t\tonClick={() => this.startSortingHandler()}>GO! \n\t\t\t\t</Button>\n\t\t\t\t<div className='Display-window'>\n\t\t\t\t\t{array.map((value)=>(\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclassName='Array-bar' \n\t\t\t\t\t\t\tkey={shortid.generate()}\n\t\t\t\t\t\t\tstyle={{height:`${value / HEIGHT_FACTOR}px`, width: `${WIDTH_FACTOR / this.props.size}px`}}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div> <strong id='comparsion-count'> 0 </strong> comparsion has been done</div>\n\t\t\t</>\n\t\t\t);\n\n  }\n\n}\n\n\nfunction randomIntFromInterval(min, max){ // min and max included \n\treturn Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button';\n\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col'\n\n\nconst SPEED = 5;\n\n\nconst MERGE_SORT = \"MERGE_SORT\";\nconst INSERTION_SORT = \"INSERTION_SORT\";\nconst QUICK_SORT = \"QUICK_SORT\";\nconst BUBBLE_SORT = \"BUBBLE_SORT\";\n\nconst SMALL_INPUT = 30;\nconst MEDIUM_INPUT = 80;\nconst LARGE_INPUT = 200;\n\n\nclass App extends React.Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n      arraySize: MEDIUM_INPUT,\n\t\t\tsortingMethod: MERGE_SORT,     // Merge, Bubble, Quick, Insertion\n\t\t\tisFinished: true,\n\t\t\tisPause: false,\n    };\n    this.changeInputSizeHandler = this.changeInputSizeHandler.bind(this);\n\n  }\n\n  \n  changeInputSizeHandler(event){\n    const newSize = event.target.value;\n    this.setState({arraySize: newSize});\n    \n  }\n  changeMethodHandler(event){\n    const newMethod = event.target.value;\n    this.setState({sortingMethod: newMethod});\n\n    \n  }\n \n\n\n\n  render(){\n  \n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Form>\n            <Form.Row>\n              <Col>\n              <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\n                <Form.Label>Choose an algorithm</Form.Label>\n                <Form.Control as=\"select\" size=\"sm\" custom \n                    // disabled={true}\n                    onChange={this.changeMethodHandler.bind(this)} >\n                  <option value={MERGE_SORT}>Merge Sort</option>\n                  <option value={QUICK_SORT}>Quick Sort</option>\n                  <option value={INSERTION_SORT}>Insertion Sort</option>\n                  <option value={BUBBLE_SORT}>Bubble Sort</option>\n                  <option>5</option>\n                </Form.Control>\n              </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"exampleForm.SelectCustomSizeSm\">\n                  <Form.Label>Input Size</Form.Label>\n                  <Form.Control as=\"select\" size=\"sm\" custom \n                    // disabled={true}\n                    onChange={ this.changeInputSizeHandler}>\n                    <option value={SMALL_INPUT}>Small</option>\n                    <option selected value={MEDIUM_INPUT}>Medium</option>\n                    <option value={LARGE_INPUT}>Large</option>\n                    <option>4</option>\n                    <option>5</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n              <Col>\n                <Form.Group controlId=\"formBasicRangeCustom\" >\n                    <Form.Label>Animation Speed</Form.Label>\n                    <Form.Control type=\"range\" custom />\n                </Form.Group>\n              </Col>\n            </Form.Row>\n          </Form>\n          \n\n          {/* <div>xxx comparson has done. xx% completed</div> */}\n\n        </header>\n\n        <Container>\n          <SortingVisualizer \n            size={this.state.arraySize}\n            sortingMethod={this.state.sortingMethod}/>\n          \n        </Container>\n\n\n      </div>\n    );\n\n  }\n\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}